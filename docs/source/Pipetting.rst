Pipetting (from HSLExtensions)
======================================

https://github.com/theonetruenerd/VenusPackages/blob/main/Pipetting.pkg

The pipetting library from HSL Extensions adds functions related to pipetting, primarily to do with sequences and channel patterns. The functions it adds are: 

- :py:func:`CreateMixedChannelPattern`
- :py:func:`CreateOrderedChannelPattern`
- :py:func:`ParseChannelPattern`
- :py:func:`Plate384PositionNumberToPositionText`
- :py:func:`Plate384PositionTextToPositionNumber`
- :py:func:`Plate96PositionNumberToPositionText`
- :py:func:`Plate96PositionTextToPositionNumber`

.. py:function:: CreateMixedChannelPattern(array i_arrUseChannel, variable i_intTotalNumberOfChannels)

  This function generates a "mixed" channel pattern. The channel pattern generated will be based on the input array, and then will be filled with "0"s up to the total number of channels (normally 8). If the array size is greater than the total number of channels inputted, the channel pattern will be limited to whatever the total number of channels inputted is. E.g. if the array is [1,1,1,1,0,0,1,0,0,0,1] and the input channel number is 8, the channel pattern generated will be "11110010".

  :params i_arrUseChannel: A boolean array of which channels should be used.
  :params i_intTotalNumberOfChannels: The total number of channels being used.
  :type i_arrUseChannel: Array
  :type i_intTotalNumberOfChannels: Variable
  :return: The channel pattern generated by the function 
  :rtype: String

.. py:function:: CreateOrderedChannelPattern(variable i_intNumberOfUsedChannels, variable i_intTotalNumberOfChannels)

  This function creates an ordered channel pattern, generating a string with as many "1"s in it as the inputted number of used channels, and adding "0"s until the total length of the channel pattern is equal to the total number of channels inputted. If the total number of used channels is greater than the total number of channels, the channel pattern will be truncated to the total number of channels. E.g. if the number of used channels is 3 and the total number of channels is 8, the channel pattern generated will be "11100000". If these numbers were reversed, the channel pattern generated would simply be "111".
  :params i_intNumberOfUsedChannels: The number of "active" channels wishing to be used in the channel pattern
  :params i_intTotalNumberOfChannels: The max number of channels available (usually 8 on a STAR)
  :type i_intNumberOfUsedChannels: Variable
  :type i_intTotalNumberOfChannels: Variable
  :return: The channel pattern generated by the function
  :rtype: String

.. py:function:: ParseChannelPattern(variable i_strChannelPattern)

  This function parses a channel pattern given as a string and creates a boolean array of the channels being used. If the input has the wrong type, or contains not allowed characters, the result is an empty array.

  :params i_strChannelPattern: The channel pattern to be parsed
  :type i_strChannelPattern: Variable
  :return: The array of booleans with the channels being used in the channel pattern
  :rtype: Array

.. py:function:: Plate384PositionNumberToPositionText(variable i_intPositionNumber, variable o_strPositionText)

  This function converts position number to position text for a 384 well plate. E.g. if given a 1 it will convert it to A1, if given a 16 it will convert it to P1, etc.

  :params i_intPositionNumber: The position number to be converted. Any int in the range of 1-384.
  :params o_strPositionText: The position text which will be the output. Will be a string of any of the well identifiers on a 384 well plate (i.e. A1-P24)
  :type i_intPositionNumber: Variable
  :type o_strPositionText: Variable
  :return: A boolean of whether the conversion was successful
  :rtype: Boolean

.. py:function:: Plate384PositionNumberToPositionText(variable i_strPositionText, variable o_intPositionNumber)

  This function converts position text to position number for a 384 well plate. E.g. if given A1 it will convert it to a 1, if given P1 it will convert it to a 16, etc.

  :params i_strPositionText: The position text to be converted. Will be a string of any of the well identifiers on a 384 well plate (i.e. A1-P24)
  :params o_intPositionNumber: The position number which will be the output. Any int in the range of 1-384.
  :type i_intPositionNumber: Variable
  :type o_strPositionText: Variable
  :return: A boolean of whether the conversion was successful
  :rtype: Boolean
