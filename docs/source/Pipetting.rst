Pipetting (from HSLExtensions)
======================================

https://github.com/theonetruenerd/VenusPackages/blob/main/Pipetting.pkg

The pipetting library from HSL Extensions adds functions related to pipetting, primarily to do with sequences and channel patterns. The functions it adds are: 

- :py:func:`CreateMixedChannelPattern`
- :py:func:`CreateOrderedChannelPattern`
- :py:func:`ParseChannelPattern`
- :py:func:`Plate384PositionNumberToPositionText`
- :py:func:`Plate384PositionTextToPositionNumber`
- :py:func:`Plate96PositionNumberToPositionText`
- :py:func:`Plate96PositionTextToPositionNumber`

.. py:function:: CreateMixedChannelPattern(array i_arrUseChannel, variable i_intTotalNumberOfChannels)

  This function generates a \"mixed\" channel pattern. The channel pattern generated will be based on the input array, and then will be filled with \"0\"s up to the total number of channels (normally 8). If the array size is greater than the total number of channels inputted, the channel pattern will be limited to whatever the total number of channels inputted is. E.g. if the array is [1,1,1,1,0,0,1,0,0,0,1] and the input channel number is 8, the channel pattern generated will be \"11110010\".

  :params i_arrUseChannel: A boolean array of which channels should be used.
  :params i_intTotalNumberOfChannels: The total number of channels being used.
  :type i_arrUseChannel: Array
  :type i_intTotalNumberOfChannels: Variable
  :return: The channel pattern generated by the function 
  :rtype: String

.. py:function:: CreateOrderedChannelPattern(variable i_intNumberOfUsedChannels, variable i_intTotalNumberOfChannels)

  This function creates an ordered channel pattern, generating a string with as many \"1\"s in it as the inputted number of used channels, and adding \"0\"s until the total length of the channel pattern is equal to the total number of channels inputted. If the total number of used channels is greater than the total number of channels, the channel pattern will be truncated to the total number of channels. E.g. if the number of used channels is 3 and the total number of channels is 8, the channel pattern generated will be \"11100000\". If these numbers were reversed, the channel pattern generated would simply be \"111\".
  :params i_intNumberOfUsedChannels:
