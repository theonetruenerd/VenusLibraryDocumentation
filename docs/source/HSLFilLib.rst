HSLFilLib - unfinished
================================

https://github.com/theonetruenerd/VenusPackages/blob/main/HSLFilLib.pkg

This library allows interaction with and manipulation of files present on the host computer. It adds the following functions: 

- :py:func:`FilEof`
- :py:func:`FilFindFile`
- :py:func:`FilFindNextFile`
- :py:func:`FilFormatBarcodeFile`
- :py:func:`FilGetBinPath`
- :py:func:`FilGetCommState`
- :py:func:`FilGetCommTimeouts`
- :py:func:`FilGetConfigPath`
- :py:func:`FilGetLabwarePath`
- :py:func:`FilGetLibraryPath`
- :py:func:`FilGetLogFilesPath`
- :py:func:`FilGetMethodsPath`
- :py:func:`FilGetSystemPath`
- :py:func:`FilIsNull`
- :py:func:`FilReadString`
- :py:func:`FilRemoveFields`
- :py:func:`FilSearchPath`
- :py:func:`FilSetCommState`
- :py:func:`FilSetCommTimeouts`
- :py:func:`FilUpdateRecord`
- :py:func:`FilWriteString`

.. py:function:: FilEof(variable filObj)

  This function checks whether the current position in the specified file is the final line

  :params filObj: The opened file to be checked
  :type filObj: Variable (file)
  :return: Boolean as to whether the position is the end of the file or not
  :rtype: Boolean

.. py:function:: FilFindFile(variable filName)

  This function starts searching the specified path for a file. This function is obsolete, and :py:func:`FilSearchPath` should be used instead.

  :params filName: The directory or path and file name to be searched for. Can contain wildcard characters such as * or ?
  :type filName: Variable
  :return: If successful, the path name of the first file found that matches the input
  :rtype: Variable

.. py:function:: FilFindNextFile()

  Continues the search from :py:func:`FilFindFile` to the next file.

  :return: If successful, the path name of the next file found that matches the input from the most recent FilFindFile command
  :rtype: Variable

.. py:function:: FilFormatBarcodeFile(variable dataSource, variable dataTarget)

  This function takes the barcode ASCII text file written during LoadCarrier and converts it into a strongly formatted barcode file. This strongly formatted file can be an ASCII text file, a Microsoft Excel file, or a Microsoft Access file. Will contain the following columns:

- ID (record ID, integer)
- Specifier (string, P = position, C = carrier)
- Position (position, integer)
- Barcode (barcode, string)
- Timestamp (timestamp, YYYY-MM-DD hh:mm:ss, string)

  :params dataSource: The name of the barcode ASCII file generated during the load carrier step
  :params dataTarget: The name of the barcode ASCII text file, Microsoft Excel file or Microsoft Access file generated by the function. The name must include a table name for a Microsoft Excel file or a Microsoft Access Database. 
  :type dataSource: Variable
  :type dataTarget: Variable
  :return: Boolean showing if the function was successful or not
  :rtype: Boolean

.. py:function:: FilGetBinPath()

  This function retrieves the vector binary path

  :return: The vectory binary path (usually C:\Program Files (x86)\Hamilton\Bin)
  :rtype: Variable

.. py:function:: FilGetCommState(file port)

  This function retrieves the configuration information for the specified communication resource. The entries of the structure that retrieves the configuration information must be accessible in the global scope.

  :params port: The communication resource opened during the file-Open operation
  :type: Port
  :return: Boolean showing if the function was successful or not
  :rtype: Boolean

.. py:function:: GetCommTimeouts(file port)

  This function retrieves the time-out parameters for all read and write operations for the specified communication resource. The entries of the structure that contains the configuration information must be accessible in the global scope. 

  :params port: The communication resource opened during the file-Open operation
  :type port: Port
  :return: Boolean showing if the function was successful or not
  :rtype: Boolean

.. FilGetConfigPath()

  This function retrieves the vector configuration path

  :return: The vector configuration path (usually C:\Program Files (x86)\Hamilton\Config)
  :rtype: Variable
